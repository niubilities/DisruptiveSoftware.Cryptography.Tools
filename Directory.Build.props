<Project>
	<!-- Properties in this file is not needed to change in general, 
	please provide your good idea if you change this file content	-->
	<PropertyGroup Condition="'$(SolutionDir)'==''">
		<SolutionDir>$(MSBuildThisFileDirectory)</SolutionDir>
	</PropertyGroup>
	<PropertyGroup>
		<ProjDir>$([MSBuild]::NormalizeDirectory($(MSBuildProjectDirectory)))</ProjDir>
		<SlnSolutionDir>$([MSBuild]::NormalizeDirectory('$(SolutionDir)','solution'))</SlnSolutionDir>
		<SlnDir>$([MSBuild]::NormalizeDirectory($(SolutionDir)))</SlnDir>
	</PropertyGroup>
	<PropertyGroup Condition="'$(TargetFramework)'=='net6.0'">
		<ImplicitUsings>enable</ImplicitUsings>
	</PropertyGroup>
	<PropertyGroup>
		<!--
		As the SDK sets these attributes automatically as part of the build, you'll get build time errors. 
		Simply delete the assembly attributes, and use the MSBuild properties instead.
		-->
		<GenerateAssemblyInfo>true</GenerateAssemblyInfo>
		<Deterministic>true</Deterministic>

		<RunAnalyzersDuringLiveAnalysis>True</RunAnalyzersDuringLiveAnalysis>
		<NeutralLanguage>zh-CHS</NeutralLanguage>

		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<PublishRepositoryUrl>true</PublishRepositoryUrl>

		<NoWarn>1701;1702;1591;8002</NoWarn>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<AutoGenerateBindingRedirects>False</AutoGenerateBindingRedirects>
		<Nullable>disable</Nullable>
		<AllowUnsafeBlocks>True</AllowUnsafeBlocks>

		<AssemblyName>$(MSBuildProjectName)</AssemblyName>
		<DefineConstants>$(DefineConstants);$(MSBuildProjectName.Replace(" ", "_").Replace(".", "_"));FEATURE_UNLOAD;FEATURE_NATIVE_RESOLVER</DefineConstants>
		<RootNamespace>$(MSBuildProjectName.Replace(" ", "_"))</RootNamespace>

		<Optimize Condition="'$(Configuration)'=='Release'">true</Optimize>
		<LangVersion>10</LangVersion>

		<DebugType>portable</DebugType>
	</PropertyGroup>

	<Import Project="solution.props" />

	<PropertyGroup>
		<PackageVersion>$(Version)</PackageVersion>
		<Title>$(AssemblyName)</Title>
	</PropertyGroup>

	<ItemGroup>
		<None Include="$(SlnDir)*.*">
			<Link> Global Files/Root(.sln)/%(Filename)%(Extension)</Link>
		</None>
		<None Include="$(SlnSolutionDir)**/*.*" Condition="Exists('$(SlnSolutionDir)')">
			<Link> Global Files/Root(.sln)/Solution/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>
		<None Include="$(SlnDir).github/**/*.*">
			<Link> Global Files/Root(.sln)/.github/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>
		<None Exclude="$(SlnDir)**/*.g.props" Include="$(SlnDir)**/*.props" >
			<Link> Global Files/%(RecursiveDir)/%(Filename)%(Extension)</Link>
		</None>

	</ItemGroup>

	<PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
		<ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
		<!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
		<PublishRepositoryUrl>true</PublishRepositoryUrl>

		<!-- 只有在 GitHub 的 Action 构建才能使用源代码链接 -->
		<!-- 源代码链接需要使用 commit 号，而在 GitHub 的 Action 构建的 commit 才是对的 -->
		<!-- 本地构建，也许没有记得 commit 就构建，此时的 nuget 包的源代码是不对的，上传上去会让调试诡异 -->
		<!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
		<EmbedUntrackedSources>true</EmbedUntrackedSources>

		<!-- 本地等不需要创建符号文件 -->
		<!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
	</PropertyGroup>

	<ItemGroup Condition="'$(GITHUB_ACTIONS)' == 'true' and '$(IsTestProject)' != 'true'">
		<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<!-- PackageReadmeFile -->
	<Choose>
		<When Condition="Exists('$(ProjDir)readme.md')">
			<PropertyGroup>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
				<ReadmeFilePath>$(ProjDir)readme.md</ReadmeFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include='$(ProjDir)readme.md' Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnSolutionDir)readme.md')">
			<PropertyGroup>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
				<ReadmeFilePath>$(SlnSolutionDir)readme.md</ReadmeFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include='$(SlnSolutionDir)readme.md' Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnDir)readme.md')">
			<PropertyGroup>
				<ReadmeFilePath>$(SlnDir)readme.md</ReadmeFilePath>
				<PackageReadmeFile>readme.md</PackageReadmeFile>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnDir)readme.md" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!--PackageReleaseNotes $(ChangeLogFileName)-->
	<Choose>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(ProjDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(ProjDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(ProjDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(SlnSolutionDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(SlnSolutionDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(SlnSolutionDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnSolutionDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ChangeLogFileName)'!='' and Exists('$(SlnDir)$(ChangeLogFileName)')">
			<PropertyGroup>
				<PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(SlnDir)$(ChangeLogFileName)"))</PackageReleaseNotes>
				<ChangeLogFilePath>$(SlnDir)$(ChangeLogFileName)</ChangeLogFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnDir)$(ChangeLogFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!-- Description and PackageDescription-->
	<!--A long description for the assembly. If PackageDescription is not specified, then this property is also used as the description of the package.-->
	<Choose>
		<When Condition="'$(ProjectDescriptionFileName)'!='' and Exists('$(ProjDir)$(ProjectDescriptionFileName)')">
			<PropertyGroup>
				<Description>$([System.IO.File]::ReadAllText("$(ProjDir)$(ProjectDescriptionFileName)"))</Description>
				<DescriptionFilePath>$(ProjDir)$(ProjectDescriptionFileName)</DescriptionFilePath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)$(ProjectDescriptionFileName)" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="'$(ProjectDescriptionFileName)'!='' and Exists('$(SlnDir)$(ProjectDescriptionFileName)')">
			<PropertyGroup>
				<Description>$([System.IO.File]::ReadAllText('$(SlnDir)$(ProjectDescriptionFileName)'))</Description>
				<DescriptionFilePath>$(SlnDir)$(ProjectDescriptionFileName)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<When Condition="'$(ReadmeFilePath)'!='' and Exists('$(ReadmeFilePath)')">
			<PropertyGroup>
				<Description>$([System.IO.File]::ReadAllText('$(ReadmeFilePath)'))</Description>
				<DescriptionFilePath>$(ReadmeFilePath)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<When Condition="'$(ChangeLogFilePath)'!='' and Exists('$(ChangeLogFilePath)')">
			<PropertyGroup>
				<Description>$([System.IO.File]::ReadAllText('$(ChangeLogFilePath)'))</Description>
				<DescriptionFilePath>$(ChangeLogFilePath)</DescriptionFilePath>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<!--default description for all packages-->
				<Description>No words necessary</Description>
				<!--<PackageDescription></PackageDescription>-->
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!--PackageIcon-->
	<Choose>
		<When Condition="Exists('$(ProjDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(ProjDir)icon.png</PackageIconPath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)icon.png" Pack='True' PackagePath='/' Visible='True' />

			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnSolutionDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(SlnSolutionDir)icon.png</PackageIconPath>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnSolutionDir)icon.png" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnDir)icon.png')">
			<PropertyGroup>
				<PackageIcon>icon.png</PackageIcon>
				<PackageIconPath>$(SlnDir)icon.png</PackageIconPath>
				<icon>icon.png</icon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnDir)icon.png" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!--ApplicationIcon - Load app.ico file for ApplicationIcon(.exe)-->
	<Choose>
		<When Condition="Exists('$(ProjDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(ProjDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(ProjDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnSolutionDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(SlnSolutionDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnSolutionDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
		<When Condition="Exists('$(SlnDir)app.ico')">
			<PropertyGroup>
				<ApplicationIcon>$(SlnDir)app.ico</ApplicationIcon>
			</PropertyGroup>
			<ItemGroup>
				<None Include="$(SlnDir)app.ico" Pack='True' PackagePath='/' Visible='True' />
			</ItemGroup>
		</When>
	</Choose>

	<!-- AssemblyOriginatorKeyFile and PackageCertificateKeyFile -->
	<Choose>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(ProjDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(ProjDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(ProjDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(SlnSolutionDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(SlnSolutionDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(SlnSolutionDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
		<When Condition="'$(CertificateFileName)'!='' and Exists('$(SlnDir)$(CertificateFileName)')">
			<PropertyGroup>
				<SignAssembly>true</SignAssembly>
				<AssemblyOriginatorKeyFile>$(SlnDir)$(CertificateFileName)</AssemblyOriginatorKeyFile>
				<PackageCertificateKeyFile>$(SlnDir)$(CertificateFileName)</PackageCertificateKeyFile>
			</PropertyGroup>
		</When>
	</Choose>

</Project>